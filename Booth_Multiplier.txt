module booth(Z,X, Y,clk);
 input signed [16:0] X;//X-Multiplier,
 input signed [7:0] Y;             //Y-Multiplicand
 //input signed [3:0] X, Y;//X-Multiplier,Y-Multiplicand
 output signed [24:0] Z;
 reg signed [24:0] Z;
 input clk;
 reg [1:0] temp;
 integer i;
 reg E1;
 reg [7:0] Y1;
 
 always @ (posedge clk)
begin

 Z = 34'd0;
 Z={8'd0,X[16:0]};
 E1 = 1'd0;
 for (i = 0; i < 17; i = i + 1)
 begin
 temp = {Z[0], E1};
 Y1 = -Y;
  case (temp)
 2'd2 : Z [24 : 0] ={ Z [24 : 17] + Y1,Z[16:0]};
 2'd1 : Z [24 : 0] = {Z [24 : 17] + Y,Z[16:0]};
 default : Z[24:0]={Z[24:17],Z[16:0]};
 endcase
 E1 = Z[0];
 Z = Z >>> 1;//Arithmetic shift
 end
 end

endmodule
